import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../session/session.dart';

class FCMService {
  static FirebaseMessaging messaging = FirebaseMessaging.instance;

  // Inicializar FCM
  static Future<void> initialize() async {
    try {
      // Solicitar permiss√µes de notifica√ß√£o
      NotificationSettings settings = await messaging.requestPermission(
        alert: true,
        announcement: false,
        badge: true,
        carPlay: false,
        criticalAlert: false,
        provisional: false,
        sound: true,
      );

      if (settings.authorizationStatus == AuthorizationStatus.authorized) {
        print('‚úÖ Permiss√£o de notifica√ß√£o concedida');

        // Obter e salvar o token FCM
        await updateFCMToken();

        // Configurar handlers
        setupMessageHandlers();
      } else {
        print('‚ùå Permiss√£o de notifica√ß√£o negada');
      }
    } catch (e) {
      print('‚ùå Erro ao inicializar FCM: $e');
    }
  }

  // Atualizar token FCM do usu√°rio
  static Future<void> updateFCMToken() async {
    try {
      final token = await messaging.getToken();
      final currentStudent = Session.currentStudent;

      if (token != null && currentStudent != null) {
        await FirebaseFirestore.instance
            .collection('students')
            .doc(currentStudent.id)
            .update({'fcmToken': token});

        print('‚úÖ Token FCM atualizado: ${token.substring(0, 20)}...');
      }
    } catch (e) {
      print('‚ùå Erro ao atualizar token FCM: $e');
    }
  }

  // Configurar handlers de mensagens
  static void setupMessageHandlers() {
    // Mensagem recebida quando app est√° em primeiro plano
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      print('üì± Mensagem recebida em primeiro plano:');
      print('T√≠tulo: ${message.notification?.title}');
      print('Corpo: ${message.notification?.body}');
    });

    // Mensagem tocada quando app est√° em background
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      print('üì± App aberto via notifica√ß√£o:');
      print('Dados: ${message.data}');

      _handleNotificationTap(message);
    });

    // Verificar se app foi aberto via notifica√ß√£o
    FirebaseMessaging.instance.getInitialMessage().then((message) {
      if (message != null) {
        print('üì± App iniciado via notifica√ß√£o');
        _handleNotificationTap(message);
      }
    });

    // Listener para mudan√ßas no token
    messaging.onTokenRefresh.listen((newToken) {
      print('üîÑ Token FCM atualizado: ${newToken.substring(0, 20)}...');
      _updateTokenInFirestore(newToken);
    });
  }

  // Tratar toque na notifica√ß√£o
  static void _handleNotificationTap(RemoteMessage message) {
    final data = message.data;

    if (data['type'] == 'chat_message') {
      // Navegar para o chat espec√≠fico
      print('üí¨ Navegar para chat');
    }
  }

  // Atualizar token no Firestore
  static Future<void> _updateTokenInFirestore(String token) async {
    try {
      final currentStudent = Session.currentStudent;

      if (currentStudent != null) {
        await FirebaseFirestore.instance
            .collection('students')
            .doc(currentStudent.id)
            .update({'fcmToken': token});
      }
    } catch (e) {
      print('‚ùå Erro ao atualizar token no Firestore: $e');
    }
  }

  // Remover token ao fazer logout
  static Future<void> clearFCMToken() async {
    try {
      final currentStudent = Session.currentStudent;

      if (currentStudent != null) {
        await FirebaseFirestore.instance
            .collection('students')
            .doc(currentStudent.id)
            .update({'fcmToken': FieldValue.delete()});

        print('‚úÖ Token FCM removido');
      }
    } catch (e) {
      print('‚ùå Erro ao remover token FCM: $e');
    }
  }
}
